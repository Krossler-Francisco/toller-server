### Variables (cambia el token después de hacer login)
@baseUrl = http://localhost:8080/api/v1
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NTk2MTY1OTYsInVzZXJfaWQiOjI1NX0._OpUasGrhHitClkwzgSoB07l7jIHA7TJHNsA9wnYg4w
@token2 = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NTk2MDY3NzUsInVzZXJfaWQiOjI1N30.DO5Elioy_Q1ZXc8dZj3LS2tzMS-mXIALXtznP45fwnA

### ============================================
### 🔐 AUTENTICACIÓN
### ============================================

### Register User
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "username": "krossler3",
  "email": "krosslerfrancisco3@gmail.com",
  "password": "1234"
}
// ✅ 201 {id, username, email}
// ❌ faltan campos → 400
// ❌ email ya registrado → 409

### Login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "krosslerfrancisco@gmail.com",
  "password": "1234"
}
// ✅ 200 {token, user: {id, username, email}}
// ❌ faltan campos → 400
// ❌ credenciales inválidas → 401

### ============================================
### 👥 TEAMS
### ============================================

### Crear Team
POST {{baseUrl}}/teams
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Team Alpha",
  "description": "Equipo de desarrollo principal"
}
// ✅ 201 {id, name, description, created_at}
// ❌ sin token → 401
// ❌ faltan campos → 400

### ============================================
### 📺 CHANNELS
### ============================================

### Crear canal en Team 1
POST {{baseUrl}}/teams/1/channels
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "General",
  "description": "Canal principal del equipo"
}

### Listar canales de Team 1
GET {{baseUrl}}/teams/1/channels
Authorization: Bearer {{token}}

### Obtener canal por ID (ejemplo: canal 1)
GET {{baseUrl}}/channels/1
Authorization: Bearer {{token}}

### Actualizar canal (canal 1)
PUT {{baseUrl}}/channels/1
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "General Actualizado",
  "description": "Descripción actualizada"
}

### Eliminar canal (canal 1)
DELETE {{baseUrl}}/channels/1
Authorization: Bearer {{token}}

### Listar miembros del canal 1
GET {{baseUrl}}/channels/1/members
Authorization: Bearer {{token}}

### Agregar miembro al canal 1 (user_id: 2)
POST {{baseUrl}}/channels/1/members
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "user_id": 2
}

### Remover miembro del canal 1 (user_id: 2)
DELETE {{baseUrl}}/channels/1/members/2
Authorization: Bearer {{token}}

### Obtener canal que no existe (debe fallar)
GET {{baseUrl}}/channels/999
Authorization: Bearer {{token}}

### Agregar canal con campo faltante (debe fallar)
POST {{baseUrl}}/teams/1/channels
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Sin descripción"
}

### Obtener mis teams
GET {{baseUrl}}/teams
Authorization: Bearer {{token}}
// ✅ 200 [ {id, name, ...}, ... ]
// ❌ sin token → 401

### Obtener Team específico

### Obtener información de un Team
GET {{baseUrl}}/teams/88
Authorization: Bearer {{token}}
// ✅ 200 {id, name, description, created_at, owner_id, ...}
// ❌ sin token → 401
// ❌ id inexistente → 404

### Obtener miembros de un Team
GET {{baseUrl}}/teams/88/members
Authorization: Bearer {{token}}
// ✅ 200 [ {user_id, username, email, role}, ... ]
// ❌ sin token → 401
// ❌ id inexistente → 404

### Actualizar Team (solo admins)
PUT {{baseUrl}}/teams/90
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Team Alpha Actualizado",
  "description": "Nueva descripción"
}
// ✅ 200 {message}
// ❌ sin token → 401
// ❌ no admin → 403
// ❌ faltan campos → 400
// ❌ id inexistente → 404

### Agregar user a team
POST {{baseUrl}}/teams/88/members
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "user_id": 254
}
// ✅ 200 {message}
// ❌ sin token → 401
// ❌ no admin → 403
// ❌ ya es miembro → 409
// ❌ user_id inexistente → 404
// ❌ campo faltante → 400

### Remover user de team
DELETE {{baseUrl}}/teams/1/members/3
Authorization: Bearer {{token}}
// ✅ 204
// ❌ sin token → 401
// ❌ no admin → 403
// ❌ user_id inexistente → 404

### Salir del team
POST {{baseUrl}}/teams/2/leave
Authorization: Bearer {{token}}
// ✅ 204
// ❌ sin token → 401
// ❌ si no pertenece al team → 404

### ============================================
### 👤 USERS
### ============================================

### Obtener todos los usuarios
GET {{baseUrl}}/users
Authorization: Bearer {{token}}
// ✅ 200 [ {id, username, email, created_at}, ... ]
// ❌ sin token → 401

### Obtener usuario por ID
GET {{baseUrl}}/users/255
Authorization: Bearer {{token}}
// ✅ 200 {id, username, email, created_at}
// ❌ sin token → 401
// ❌ id inexistente → 404
// ❌ id inválido (abc, -1) → 400

### Buscar usuarios
GET {{baseUrl}}/users/search?query=maria
Authorization: Bearer {{token}}
// ✅ 200 [ {id, username, email}, ... ]
// ❌ sin token → 401

### recuperar info del usuario logueado
GET {{baseUrl}}/users/me/257
Authorization: Bearer {{token}}
// ✅ 200 {id, username, email, created_at}
// ❌ sin token → 401

### ============================================
### 👫 FRIENDS
### ============================================

### Enviar solicitud de amistad
POST {{baseUrl}}/friends/requests
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "friend_id": 257
}
// ✅ 201 {request_id, status: "pending"}
// ❌ sin token → 401
// ❌ friend_id inexistente → 404
// ❌ ya son amigos / solicitud pendiente → 409
// ❌ campo faltante → 400

### Listar mis amigos
GET {{baseUrl}}/friends
Authorization: Bearer {{token}}
// ✅ 200 [ {id, username, ...}, ... ]
// ❌ sin token → 401

### Listar solicitudes pendientes
GET {{baseUrl}}/friends/requests/pending
Authorization: Bearer {{token2}}
// ✅ 200 [ {id, from_user, to_user, status}, ... ]
// ❌ sin token → 401

### Aprobar solicitud de amistad
PUT {{baseUrl}}/friends/requests/255
Content-Type: application/json
Authorization: Bearer {{token2}}

{
  "status": "accepted"
}
// ✅ 204 (sin body) o 200 {message}
// ❌ sin token → 401
// ❌ request_id inexistente → 404
// ❌ no sos destinatario → 403
// ❌ status inválido → 400

### Eliminar amigo
DELETE {{baseUrl}}/friends/2
Authorization: Bearer {{token}}
// ✅ 204
// ❌ sin token → 401
// ❌ id inexistente → 404

### ============================================
### 💬 DMS (Mensajes Directos)
### ============================================

### Crear canal DM
POST {{baseUrl}}/dms
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "user_id": 257
}
// ✅ 201 {channel_id, user_id, created_at}
// ❌ sin token → 401
// ❌ user_id inexistente → 404
// ❌ ya existe canal → 409
// ❌ campo faltante → 400

### Listar mis DMs
GET {{baseUrl}}/dms
Authorization: Bearer {{token}}
// ✅ 200 [ {channel_id, user_id, ...}, ... ]
// ❌ sin token → 401

### Obtener mensajes de un DM
GET {{baseUrl}}/dms/1/messages
Authorization: Bearer {{token}}
// ✅ 200 [ {id, from_user, to_user, text, created_at}, ... ]
// ❌ sin token → 401
// ❌ channel_id inexistente → 404

### Marcar mensajes como leídos en un DM
POST {{baseUrl}}/dms/1/read
Authorization: Bearer {{token}}
// ✅ 204
// ❌ sin token → 401
// ❌ channel_id inexistente → 404

### ============================================
### � WEBSOCKETS
### ============================================

#### Documentación de WebSocket

// Los WebSockets se usan para chat en tiempo real y notificaciones.
// Endpoint principal:

ws://localhost:8080/ws/chat?token={{token}}

// Ejemplo de conexión en JavaScript:
/*
const ws = new WebSocket('ws://localhost:8080/ws/chat?token=TU_TOKEN');
ws.onopen = () => {
  // Autenticado y listo para enviar/recibir mensajes
};
ws.onmessage = (event) => {
  const data = JSON.parse(event.data);
  // Manejar mensaje entrante
};
ws.send(JSON.stringify({
  type: "message",
  channel_id: 1,
  text: "Hola a todos!"
}));
*/

// Mensajes soportados (ejemplo):
// Enviar mensaje:
{
  "type": "message",
  "channel_id": 1,
  "text": "Hola a todos!"
}

// Recibir mensaje:
{
  "type": "message",
  "from_user": 255,
  "channel_id": 1,
  "text": "Hola a todos!",
  "created_at": "2025-10-01T17:00:00Z"
}

// Notificación de usuario conectado:
{
  "type": "user_joined",
  "user_id": 255,
  "channel_id": 1
}

// Notificación de usuario desconectado:
{
  "type": "user_left",
  "user_id": 255,
  "channel_id": 1
}

// Error:
{
  "type": "error",
  "message": "Token inválido"
}

// Otros tipos pueden incluir: typing, read, etc.

### ============================================
### �📡 CANALES
### ============================================

### Crear canal en Team
POST {{baseUrl}}/teams/88/channels
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Canal General"
}
// ✅ 201 {id, name, created_at}
// ❌ sin token → 401
// ❌ no admin → 403
// ❌ campo faltante → 400
// ❌ team_id inexistente → 404

### Listar canales del Team
GET {{baseUrl}}/teams/88/channels
Authorization: Bearer {{token}}
// ✅ 200 [ {id, name, ...}, ... ]
// ❌ sin token → 401
// ❌ team_id inexistente → 404

### ============================================
### 🧪 PRUEBAS DE SEGURIDAD
### ============================================

### Acceder a ruta protegida sin token
GET {{baseUrl}}/teams
// ❌ 401

### Acceder con token inválido
GET {{baseUrl}}/teams
Authorization: Bearer token_invalido_123
// ❌ 401

### Acceder con token mal formado
GET {{baseUrl}}/teams
Authorization: InvalidFormat
// ❌ 401

### JSON malformado
POST {{baseUrl}}/teams
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Test"
  "missing_comma": true
}
// ❌ 400

### Campo faltante en request
POST {{baseUrl}}/teams/1/members
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "wrong_field": 2
}
// ❌ 400
